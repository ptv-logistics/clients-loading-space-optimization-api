/* tslint:disable */
/* eslint-disable */
/**
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Describes the position of an item in a bin. 
 * The coordinate system is right-handed with x extending to the right, y pointing up and z pointing towards you. In terms of a truck (0,0,0) would be at the lower-left-corner of the opposing wall when looking through the back doors. 
 * An item, for example a palette, placed there would be on the ground. It would also touch the left wall as well as the wall towards the drivers cabin.
 * 
 * @export
 * @interface ItemPosition
 */
export interface ItemPosition {
    /**
     * Offset along x-axis in [cm]. Equal to the shift along the width of the bin from left to right.
     * @type {number}
     * @memberof ItemPosition
     */
    x: number;
    /**
     * Offset along y-axis in [cm]. Equal to the height from the floor of the bin.
     * @type {number}
     * @memberof ItemPosition
     */
    y: number;
    /**
     * Offset along z-axis in [cm]. Equal to the shift along the length of the bin from back to front.
     * @type {number}
     * @memberof ItemPosition
     */
    z: number;
}

/**
 * Check if a given object implements the ItemPosition interface.
 */
export function instanceOfItemPosition(value: object): value is ItemPosition {
    if (!('x' in value) || value['x'] === undefined) return false;
    if (!('y' in value) || value['y'] === undefined) return false;
    if (!('z' in value) || value['z'] === undefined) return false;
    return true;
}

export function ItemPositionFromJSON(json: any): ItemPosition {
    return ItemPositionFromJSONTyped(json, false);
}

export function ItemPositionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemPosition {
    if (json == null) {
        return json;
    }
    return {
        
        'x': json['x'],
        'y': json['y'],
        'z': json['z'],
    };
}

export function ItemPositionToJSON(value?: ItemPosition | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'x': value['x'],
        'y': value['y'],
        'z': value['z'],
    };
}

