/* tslint:disable */
/* eslint-disable */
/**
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Algorithmic focus for the bin packing operation:
 * * `BUILD_LAYERS` - Focus on building horizontal layers of similar items. This will freely use available floor space with no special regard to loading meters.
 * * `REDUCE_LOADING_METERS` - Focus on reducing loading meters. This might result in less efficient use of overall volume.
 * @export
 */
export const BinPackingFocus = {
    BUILD_LAYERS: 'BUILD_LAYERS',
    REDUCE_LOADING_METERS: 'REDUCE_LOADING_METERS'
} as const;
export type BinPackingFocus = typeof BinPackingFocus[keyof typeof BinPackingFocus];


export function instanceOfBinPackingFocus(value: any): boolean {
    for (const key in BinPackingFocus) {
        if (Object.prototype.hasOwnProperty.call(BinPackingFocus, key)) {
            if (BinPackingFocus[key as keyof typeof BinPackingFocus] === value) {
                return true;
            }
        }
    }
    return false;
}

export function BinPackingFocusFromJSON(json: any): BinPackingFocus {
    return BinPackingFocusFromJSONTyped(json, false);
}

export function BinPackingFocusFromJSONTyped(json: any, ignoreDiscriminator: boolean): BinPackingFocus {
    return json as BinPackingFocus;
}

export function BinPackingFocusToJSON(value?: BinPackingFocus | null): any {
    return value as any;
}

