/* tslint:disable */
/* eslint-disable */
/**
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { StackingRestrictions } from './StackingRestrictions';
import {
    StackingRestrictionsFromJSON,
    StackingRestrictionsFromJSONTyped,
    StackingRestrictionsToJSON,
} from './StackingRestrictions';

/**
 * Defines all stacking options to be considered during the packing algorithm.
 * @export
 * @interface StackingOptions
 */
export interface StackingOptions {
    /**
     * Defines all the stacking restrictions between items.
     * @type {Array<StackingRestrictions>}
     * @memberof StackingOptions
     */
    stackingRestrictions?: Array<StackingRestrictions>;
    /**
     * Specifies if it is allowed to stack items of a stop above items of the next stops. Only relevant if unloadingSequence is used.
     * @type {boolean}
     * @memberof StackingOptions
     */
    stackOnTopOfNextStops?: boolean;
    /**
     * Specifies whether larger items can be placed across multiple adjacent stacks of the same height, even if those stacks contain different items. By default (when false), items can only be stacked on top of adjacent stacks containing the same items.
     * 
     * @type {boolean}
     * @memberof StackingOptions
     */
    stackOnTopOfMultipleStacks?: boolean;
}

/**
 * Check if a given object implements the StackingOptions interface.
 */
export function instanceOfStackingOptions(value: object): value is StackingOptions {
    return true;
}

export function StackingOptionsFromJSON(json: any): StackingOptions {
    return StackingOptionsFromJSONTyped(json, false);
}

export function StackingOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): StackingOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'stackingRestrictions': json['stackingRestrictions'] == null ? undefined : ((json['stackingRestrictions'] as Array<any>).map(StackingRestrictionsFromJSON)),
        'stackOnTopOfNextStops': json['stackOnTopOfNextStops'] == null ? undefined : json['stackOnTopOfNextStops'],
        'stackOnTopOfMultipleStacks': json['stackOnTopOfMultipleStacks'] == null ? undefined : json['stackOnTopOfMultipleStacks'],
    };
}

export function StackingOptionsToJSON(value?: StackingOptions | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'stackingRestrictions': value['stackingRestrictions'] == null ? undefined : ((value['stackingRestrictions'] as Array<any>).map(StackingRestrictionsToJSON)),
        'stackOnTopOfNextStops': value['stackOnTopOfNextStops'],
        'stackOnTopOfMultipleStacks': value['stackOnTopOfMultipleStacks'],
    };
}

