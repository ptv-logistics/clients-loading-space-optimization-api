/*
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.binpacking.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.binpacking.model.StackingOptions;
import com.ptvgroup.developer.client.binpacking.model.Stop;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.binpacking.ApiClient;
/**
 * Allows customization of the bin packing operation.
 */
@JsonPropertyOrder({
  BinPackingOptions.JSON_PROPERTY_UNLOADING_SEQUENCE,
  BinPackingOptions.JSON_PROPERTY_STACKING_OPTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T13:28:30.257776203Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class BinPackingOptions {
  public static final String JSON_PROPERTY_UNLOADING_SEQUENCE = "unloadingSequence";
  private List<Stop> unloadingSequence = new ArrayList<>();

  public static final String JSON_PROPERTY_STACKING_OPTIONS = "stackingOptions";
  private StackingOptions stackingOptions;

  public BinPackingOptions() { 
  }

  public BinPackingOptions unloadingSequence(List<Stop> unloadingSequence) {
    this.unloadingSequence = unloadingSequence;
    return this;
  }

  public BinPackingOptions addUnloadingSequenceItem(Stop unloadingSequenceItem) {
    if (this.unloadingSequence == null) {
      this.unloadingSequence = new ArrayList<>();
    }
    this.unloadingSequence.add(unloadingSequenceItem);
    return this;
  }

  /**
   * Specifies the sequence of items or group of items to be unloaded. The first element of this sequence will be unloaded first (and loaded last). By default items of a stop will not be stacked on top of items of the subsequent stop. This may be useful when unloading all items of a stop with a hand truck. To change this behavior specify &#39;stackOnTopOfNextStops&#39;. Please note that this option can only be used the case a single bin is defined.
   * @return unloadingSequence
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNLOADING_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Stop> getUnloadingSequence() {
    return unloadingSequence;
  }


  @JsonProperty(JSON_PROPERTY_UNLOADING_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnloadingSequence(List<Stop> unloadingSequence) {
    this.unloadingSequence = unloadingSequence;
  }


  public BinPackingOptions stackingOptions(StackingOptions stackingOptions) {
    this.stackingOptions = stackingOptions;
    return this;
  }

  /**
   * Get stackingOptions
   * @return stackingOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STACKING_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public StackingOptions getStackingOptions() {
    return stackingOptions;
  }


  @JsonProperty(JSON_PROPERTY_STACKING_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStackingOptions(StackingOptions stackingOptions) {
    this.stackingOptions = stackingOptions;
  }


  /**
   * Return true if this BinPackingOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinPackingOptions binPackingOptions = (BinPackingOptions) o;
    return Objects.equals(this.unloadingSequence, binPackingOptions.unloadingSequence) &&
        Objects.equals(this.stackingOptions, binPackingOptions.stackingOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unloadingSequence, stackingOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinPackingOptions {\n");
    sb.append("    unloadingSequence: ").append(toIndentedString(unloadingSequence)).append("\n");
    sb.append("    stackingOptions: ").append(toIndentedString(stackingOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `unloadingSequence` to the URL query string
    if (getUnloadingSequence() != null) {
      for (int i = 0; i < getUnloadingSequence().size(); i++) {
        if (getUnloadingSequence().get(i) != null) {
          joiner.add(getUnloadingSequence().get(i).toUrlQueryString(String.format("%sunloadingSequence%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `stackingOptions` to the URL query string
    if (getStackingOptions() != null) {
      joiner.add(getStackingOptions().toUrlQueryString(prefix + "stackingOptions" + suffix));
    }

    return joiner.toString();
  }
}

