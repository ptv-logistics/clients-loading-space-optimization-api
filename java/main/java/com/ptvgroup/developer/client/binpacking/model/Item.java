/*
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.binpacking.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.binpacking.model.AllowedOrientation;
import com.ptvgroup.developer.client.binpacking.model.BoxDimensions;
import com.ptvgroup.developer.client.binpacking.model.ItemSurfaceLoads;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.binpacking.ApiClient;
/**
 * Item
 */
@JsonPropertyOrder({
  Item.JSON_PROPERTY_ID,
  Item.JSON_PROPERTY_DIMENSIONS,
  Item.JSON_PROPERTY_WEIGHT,
  Item.JSON_PROPERTY_MAXIMUM_SURFACE_LOADS,
  Item.JSON_PROPERTY_ALLOWED_ORIENTATIONS,
  Item.JSON_PROPERTY_NUMBER_OF_INSTANCES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T13:28:30.257776203Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class Item {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_DIMENSIONS = "dimensions";
  private BoxDimensions dimensions;

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  private Integer weight;

  public static final String JSON_PROPERTY_MAXIMUM_SURFACE_LOADS = "maximumSurfaceLoads";
  private ItemSurfaceLoads maximumSurfaceLoads;

  public static final String JSON_PROPERTY_ALLOWED_ORIENTATIONS = "allowedOrientations";
  private List<AllowedOrientation> allowedOrientations = new ArrayList<>();

  public static final String JSON_PROPERTY_NUMBER_OF_INSTANCES = "numberOfInstances";
  private Integer numberOfInstances = 1;

  public Item() { 
  }

  public Item id(String id) {
    this.id = id;
    return this;
  }

  /**
   * User provided ID for this item. Must be unique.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public Item dimensions(BoxDimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public BoxDimensions getDimensions() {
    return dimensions;
  }


  @JsonProperty(JSON_PROPERTY_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDimensions(BoxDimensions dimensions) {
    this.dimensions = dimensions;
  }


  public Item weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Weight of this item in [g].
   * minimum: 0
   * maximum: 80000000
   * @return weight
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public Item maximumSurfaceLoads(ItemSurfaceLoads maximumSurfaceLoads) {
    this.maximumSurfaceLoads = maximumSurfaceLoads;
    return this;
  }

  /**
   * Get maximumSurfaceLoads
   * @return maximumSurfaceLoads
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAXIMUM_SURFACE_LOADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ItemSurfaceLoads getMaximumSurfaceLoads() {
    return maximumSurfaceLoads;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_SURFACE_LOADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximumSurfaceLoads(ItemSurfaceLoads maximumSurfaceLoads) {
    this.maximumSurfaceLoads = maximumSurfaceLoads;
  }


  public Item allowedOrientations(List<AllowedOrientation> allowedOrientations) {
    this.allowedOrientations = allowedOrientations;
    return this;
  }

  public Item addAllowedOrientationsItem(AllowedOrientation allowedOrientationsItem) {
    if (this.allowedOrientations == null) {
      this.allowedOrientations = new ArrayList<>();
    }
    this.allowedOrientations.add(allowedOrientationsItem);
    return this;
  }

  /**
   * Enumerates possible orientations. If not given all orientations will be allowed. * &#x60;ORIGINAL&#x60; - Item is not re-oriented. Dimensions stay (x,y,z). * &#x60;X&#x60; - Item is rotated around x-axis (widthwise) by +/-90 degrees compared to the original orientation. Dimensions are (x,z,y). * &#x60;Y&#x60; - Item is rotated around y-axis (heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,y,x). * &#x60;Z&#x60; - Item is rotated around z-axis (lengthwise) by +/-90 degrees compared to the original orientation. Dimensions are (y,x,z). * &#x60;XZ&#x60; - Item is rotated around x- then z-axis (width- then heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,x,y). * &#x60;YZ&#x60; - Item is rotated around x- then z-axis (width- then heightwise) by +/-90 degrees compared to the original orientation. Dimensions are (z,x,y).
   * @return allowedOrientations
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOWED_ORIENTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<AllowedOrientation> getAllowedOrientations() {
    return allowedOrientations;
  }


  @JsonProperty(JSON_PROPERTY_ALLOWED_ORIENTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedOrientations(List<AllowedOrientation> allowedOrientations) {
    this.allowedOrientations = allowedOrientations;
  }


  public Item numberOfInstances(Integer numberOfInstances) {
    this.numberOfInstances = numberOfInstances;
    return this;
  }

  /**
   * Number of instances of this item that should be packed.
   * minimum: 1
   * maximum: 10000
   * @return numberOfInstances
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getNumberOfInstances() {
    return numberOfInstances;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfInstances(Integer numberOfInstances) {
    this.numberOfInstances = numberOfInstances;
  }


  /**
   * Return true if this Item object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item item = (Item) o;
    return Objects.equals(this.id, item.id) &&
        Objects.equals(this.dimensions, item.dimensions) &&
        Objects.equals(this.weight, item.weight) &&
        Objects.equals(this.maximumSurfaceLoads, item.maximumSurfaceLoads) &&
        Objects.equals(this.allowedOrientations, item.allowedOrientations) &&
        Objects.equals(this.numberOfInstances, item.numberOfInstances);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, dimensions, weight, maximumSurfaceLoads, allowedOrientations, numberOfInstances);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    maximumSurfaceLoads: ").append(toIndentedString(maximumSurfaceLoads)).append("\n");
    sb.append("    allowedOrientations: ").append(toIndentedString(allowedOrientations)).append("\n");
    sb.append("    numberOfInstances: ").append(toIndentedString(numberOfInstances)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dimensions` to the URL query string
    if (getDimensions() != null) {
      joiner.add(getDimensions().toUrlQueryString(prefix + "dimensions" + suffix));
    }

    // add `weight` to the URL query string
    if (getWeight() != null) {
      joiner.add(String.format("%sweight%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWeight()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `maximumSurfaceLoads` to the URL query string
    if (getMaximumSurfaceLoads() != null) {
      joiner.add(getMaximumSurfaceLoads().toUrlQueryString(prefix + "maximumSurfaceLoads" + suffix));
    }

    // add `allowedOrientations` to the URL query string
    if (getAllowedOrientations() != null) {
      for (int i = 0; i < getAllowedOrientations().size(); i++) {
        if (getAllowedOrientations().get(i) != null) {
          joiner.add(String.format("%sallowedOrientations%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getAllowedOrientations().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `numberOfInstances` to the URL query string
    if (getNumberOfInstances() != null) {
      joiner.add(String.format("%snumberOfInstances%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNumberOfInstances()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

