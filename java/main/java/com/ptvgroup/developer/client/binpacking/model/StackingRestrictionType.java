/*
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.binpacking.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Defines the stacking restrictions: * &#x60;ALL_ALLOWED&#x60; - All items can be stacked on top of this item. * &#x60;ALL_PROHIBITED&#x60; - No further item may be stacked on top of this item. * &#x60;ALLOWED&#x60; - Every listed items can be stacked on top of this item. * &#x60;PROHIBITED&#x60; - None of the listed items may be stacked on top of this item.
 */
public enum StackingRestrictionType {
  
  ALL_ALLOWED("ALL_ALLOWED"),
  
  ALL_PROHIBITED("ALL_PROHIBITED"),
  
  ALLOWED("ALLOWED"),
  
  PROHIBITED("PROHIBITED");

  private String value;

  StackingRestrictionType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static StackingRestrictionType fromValue(String value) {
    for (StackingRestrictionType b : StackingRestrictionType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    if (prefix == null) {
      prefix = "";
    }

    return String.format("%s=%s", prefix, this.toString());
  }

}

