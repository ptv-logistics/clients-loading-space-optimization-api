/*
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.binpacking.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.binpacking.model.Bin;
import com.ptvgroup.developer.client.binpacking.model.BinPackingOptions;
import com.ptvgroup.developer.client.binpacking.model.Item;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.binpacking.ApiClient;
/**
 * PackBinsRequest
 */
@JsonPropertyOrder({
  PackBinsRequest.JSON_PROPERTY_ITEMS,
  PackBinsRequest.JSON_PROPERTY_BINS,
  PackBinsRequest.JSON_PROPERTY_OPTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T13:28:30.257776203Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class PackBinsRequest {
  public static final String JSON_PROPERTY_ITEMS = "items";
  private List<Item> items = new ArrayList<>();

  public static final String JSON_PROPERTY_BINS = "bins";
  private List<Bin> bins = new ArrayList<>();

  public static final String JSON_PROPERTY_OPTIONS = "options";
  private BinPackingOptions options;

  public PackBinsRequest() { 
  }

  public PackBinsRequest items(List<Item> items) {
    this.items = items;
    return this;
  }

  public PackBinsRequest addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Describes a list of cuboid items that have to be packed into a bin. If there are many identical items that do not have to be differentiated by individual Item.id you should use the Item.numberOfInstances field. This provides better performance and packing than specifying each item on its own when this is not needed. Please note that along each axis the dimension should not exceed 5,000 cm and the sum of each dimension (i.e. x+y+z) should be greater than 50 cm. 
   * @return items
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<Item> getItems() {
    return items;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setItems(List<Item> items) {
    this.items = items;
  }


  public PackBinsRequest bins(List<Bin> bins) {
    this.bins = bins;
    return this;
  }

  public PackBinsRequest addBinsItem(Bin binsItem) {
    if (this.bins == null) {
      this.bins = new ArrayList<>();
    }
    this.bins.add(binsItem);
    return this;
  }

  /**
   * Describes a list of cuboid bins into which items can be packed. Please note that along each axis the dimension should not exceed 5,750 cm and the maximum volume of a bin is 425,385,000 cmÂ³. 
   * @return bins
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BINS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<Bin> getBins() {
    return bins;
  }


  @JsonProperty(JSON_PROPERTY_BINS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBins(List<Bin> bins) {
    this.bins = bins;
  }


  public PackBinsRequest options(BinPackingOptions options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BinPackingOptions getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(BinPackingOptions options) {
    this.options = options;
  }


  /**
   * Return true if this PackBinsRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackBinsRequest packBinsRequest = (PackBinsRequest) o;
    return Objects.equals(this.items, packBinsRequest.items) &&
        Objects.equals(this.bins, packBinsRequest.bins) &&
        Objects.equals(this.options, packBinsRequest.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, bins, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackBinsRequest {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    bins: ").append(toIndentedString(bins)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `items` to the URL query string
    if (getItems() != null) {
      for (int i = 0; i < getItems().size(); i++) {
        if (getItems().get(i) != null) {
          joiner.add(getItems().get(i).toUrlQueryString(String.format("%sitems%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `bins` to the URL query string
    if (getBins() != null) {
      for (int i = 0; i < getBins().size(); i++) {
        if (getBins().get(i) != null) {
          joiner.add(getBins().get(i).toUrlQueryString(String.format("%sbins%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `options` to the URL query string
    if (getOptions() != null) {
      joiner.add(getOptions().toUrlQueryString(prefix + "options" + suffix));
    }

    return joiner.toString();
  }
}

