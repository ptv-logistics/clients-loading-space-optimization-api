/*
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ptvgroup.developer.client.binpacking.api;

import com.ptvgroup.developer.client.binpacking.ApiClient;
import com.ptvgroup.developer.client.binpacking.ApiException;
import com.ptvgroup.developer.client.binpacking.ApiResponse;
import com.ptvgroup.developer.client.binpacking.Pair;

import com.ptvgroup.developer.client.binpacking.model.BinPackingFocus;
import com.ptvgroup.developer.client.binpacking.model.ErrorResponse;
import com.ptvgroup.developer.client.binpacking.model.PackBinsRequest;
import com.ptvgroup.developer.client.binpacking.model.PackBinsResponse;
import com.ptvgroup.developer.client.binpacking.model.PackedBinsIdentifier;
import com.ptvgroup.developer.client.binpacking.model.StatusResponse;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T13:28:30.257776203Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class BinsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public BinsApi() {
    this(new ApiClient());
  }

  public BinsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Cancels a bin packing operation and deletes the results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
   * @param id The ID of a bin packing operation. (required)
   * @throws ApiException if fails to make API call
   */
  public void cancelBinPacking(UUID id) throws ApiException {
    cancelBinPackingWithHttpInfo(id);
  }

  /**
   * 
   * Cancels a bin packing operation and deletes the results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
   * @param id The ID of a bin packing operation. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> cancelBinPackingWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = cancelBinPackingRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("cancelBinPacking", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder cancelBinPackingRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling cancelBinPacking");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/bins/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 
   * Gets the results of a bin packing operation specified by its ID.
   * @param id The ID of a bin packing operation. (required)
   * @return PackBinsResponse
   * @throws ApiException if fails to make API call
   */
  public PackBinsResponse getPackedBins(UUID id) throws ApiException {
    ApiResponse<PackBinsResponse> localVarResponse = getPackedBinsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Gets the results of a bin packing operation specified by its ID.
   * @param id The ID of a bin packing operation. (required)
   * @return ApiResponse&lt;PackBinsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PackBinsResponse> getPackedBinsWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPackedBinsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPackedBins", localVarResponse);
        }
        return new ApiResponse<PackBinsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PackBinsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPackedBinsRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getPackedBins");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/bins/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 
   * Returns the status of a bin packing operation.
   * @param id The ID of a bin packing operation. (required)
   * @param maximumPollingPeriod If the calculation is still running, this operation will be blocked and will not return before this period [ms] expires. If the calculation is completed, it will return immediately.  The default of 0 ms will cause the operation to return immediately in any case. Use a value &gt; 0 to implement long polling to reduce the number of requests. See the [tutorial](https://developer.myptv.com/en/resources/tutorials/general/how-use-asynchronous-requests-ptv-developer-apis) on asynchronous requests for details.  (optional, default to 0)
   * @return StatusResponse
   * @throws ApiException if fails to make API call
   */
  public StatusResponse getStatus(UUID id, Integer maximumPollingPeriod) throws ApiException {
    ApiResponse<StatusResponse> localVarResponse = getStatusWithHttpInfo(id, maximumPollingPeriod);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns the status of a bin packing operation.
   * @param id The ID of a bin packing operation. (required)
   * @param maximumPollingPeriod If the calculation is still running, this operation will be blocked and will not return before this period [ms] expires. If the calculation is completed, it will return immediately.  The default of 0 ms will cause the operation to return immediately in any case. Use a value &gt; 0 to implement long polling to reduce the number of requests. See the [tutorial](https://developer.myptv.com/en/resources/tutorials/general/how-use-asynchronous-requests-ptv-developer-apis) on asynchronous requests for details.  (optional, default to 0)
   * @return ApiResponse&lt;StatusResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StatusResponse> getStatusWithHttpInfo(UUID id, Integer maximumPollingPeriod) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStatusRequestBuilder(id, maximumPollingPeriod);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getStatus", localVarResponse);
        }
        return new ApiResponse<StatusResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StatusResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStatusRequestBuilder(UUID id, Integer maximumPollingPeriod) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/bins/status/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "maximumPollingPeriod";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximumPollingPeriod", maximumPollingPeriod));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 
   * Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
   * @param packBinsRequest Specifies a packing problem consisting of a number of up to 100 items of various types that get packed into up to 2 bins of various types. Items as well as bins are always of cuboid shape.  (required)
   * @param focus  (optional, default to BUILD_LAYERS)
   * @return PackBinsResponse
   * @throws ApiException if fails to make API call
   */
  public PackBinsResponse packBins(PackBinsRequest packBinsRequest, BinPackingFocus focus) throws ApiException {
    ApiResponse<PackBinsResponse> localVarResponse = packBinsWithHttpInfo(packBinsRequest, focus);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
   * @param packBinsRequest Specifies a packing problem consisting of a number of up to 100 items of various types that get packed into up to 2 bins of various types. Items as well as bins are always of cuboid shape.  (required)
   * @param focus  (optional, default to BUILD_LAYERS)
   * @return ApiResponse&lt;PackBinsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PackBinsResponse> packBinsWithHttpInfo(PackBinsRequest packBinsRequest, BinPackingFocus focus) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = packBinsRequestBuilder(packBinsRequest, focus);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("packBins", localVarResponse);
        }
        return new ApiResponse<PackBinsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PackBinsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder packBinsRequestBuilder(PackBinsRequest packBinsRequest, BinPackingFocus focus) throws ApiException {
    // verify the required parameter 'packBinsRequest' is set
    if (packBinsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'packBinsRequest' when calling packBins");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/bins";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "focus";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("focus", focus));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(packBinsRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 
   * Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
   * @param packBinsRequest Specifies a packing problem consisting of a number of items of various types that get packed into a number of bins of various types. Items as well as bins are always of cuboid shape.  (required)
   * @param focus  (optional, default to BUILD_LAYERS)
   * @return PackedBinsIdentifier
   * @throws ApiException if fails to make API call
   */
  public PackedBinsIdentifier startBinPacking(PackBinsRequest packBinsRequest, BinPackingFocus focus) throws ApiException {
    ApiResponse<PackedBinsIdentifier> localVarResponse = startBinPackingWithHttpInfo(packBinsRequest, focus);
    return localVarResponse.getData();
  }

  /**
   * 
   * Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
   * @param packBinsRequest Specifies a packing problem consisting of a number of items of various types that get packed into a number of bins of various types. Items as well as bins are always of cuboid shape.  (required)
   * @param focus  (optional, default to BUILD_LAYERS)
   * @return ApiResponse&lt;PackedBinsIdentifier&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PackedBinsIdentifier> startBinPackingWithHttpInfo(PackBinsRequest packBinsRequest, BinPackingFocus focus) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startBinPackingRequestBuilder(packBinsRequest, focus);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startBinPacking", localVarResponse);
        }
        return new ApiResponse<PackedBinsIdentifier>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PackedBinsIdentifier>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startBinPackingRequestBuilder(PackBinsRequest packBinsRequest, BinPackingFocus focus) throws ApiException {
    // verify the required parameter 'packBinsRequest' is set
    if (packBinsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'packBinsRequest' when calling startBinPacking");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/bins/async";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "focus";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("focus", focus));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(packBinsRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
