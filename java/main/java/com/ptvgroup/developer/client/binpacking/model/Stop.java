/*
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.binpacking.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.binpacking.model.ItemsToUnload;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.binpacking.ApiClient;
/**
 * Defines the list of items to be unloaded at this point.
 */
@JsonPropertyOrder({
  Stop.JSON_PROPERTY_ITEMS_TO_UNLOAD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T13:28:30.257776203Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class Stop {
  public static final String JSON_PROPERTY_ITEMS_TO_UNLOAD = "itemsToUnload";
  private List<ItemsToUnload> itemsToUnload = new ArrayList<>();

  public Stop() { 
  }

  public Stop itemsToUnload(List<ItemsToUnload> itemsToUnload) {
    this.itemsToUnload = itemsToUnload;
    return this;
  }

  public Stop addItemsToUnloadItem(ItemsToUnload itemsToUnloadItem) {
    if (this.itemsToUnload == null) {
      this.itemsToUnload = new ArrayList<>();
    }
    this.itemsToUnload.add(itemsToUnloadItem);
    return this;
  }

  /**
   * Defines the list of items to unload.
   * @return itemsToUnload
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ITEMS_TO_UNLOAD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<ItemsToUnload> getItemsToUnload() {
    return itemsToUnload;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS_TO_UNLOAD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setItemsToUnload(List<ItemsToUnload> itemsToUnload) {
    this.itemsToUnload = itemsToUnload;
  }


  /**
   * Return true if this Stop object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stop stop = (Stop) o;
    return Objects.equals(this.itemsToUnload, stop.itemsToUnload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemsToUnload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stop {\n");
    sb.append("    itemsToUnload: ").append(toIndentedString(itemsToUnload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `itemsToUnload` to the URL query string
    if (getItemsToUnload() != null) {
      for (int i = 0; i < getItemsToUnload().size(); i++) {
        if (getItemsToUnload().get(i) != null) {
          joiner.add(getItemsToUnload().get(i).toUrlQueryString(String.format("%sitemsToUnload%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

