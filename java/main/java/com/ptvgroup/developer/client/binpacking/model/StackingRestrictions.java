/*
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.binpacking.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.binpacking.model.StackingRestrictionType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.binpacking.ApiClient;
/**
 * Define the stacking restriction for one item. Specifies which items are allowed or prohibited to be stacked on this item. 
 */
@JsonPropertyOrder({
  StackingRestrictions.JSON_PROPERTY_ITEM_ID,
  StackingRestrictions.JSON_PROPERTY_RESTRICTION_TYPE,
  StackingRestrictions.JSON_PROPERTY_ITEM_IDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T13:28:30.257776203Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class StackingRestrictions {
  public static final String JSON_PROPERTY_ITEM_ID = "itemId";
  private String itemId;

  public static final String JSON_PROPERTY_RESTRICTION_TYPE = "restrictionType";
  private StackingRestrictionType restrictionType = StackingRestrictionType.ALL_ALLOWED;

  public static final String JSON_PROPERTY_ITEM_IDS = "itemIds";
  private List<String> itemIds = new ArrayList<>();

  public StackingRestrictions() { 
  }

  public StackingRestrictions itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * ID of the item.
   * @return itemId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ITEM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getItemId() {
    return itemId;
  }


  @JsonProperty(JSON_PROPERTY_ITEM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public StackingRestrictions restrictionType(StackingRestrictionType restrictionType) {
    this.restrictionType = restrictionType;
    return this;
  }

  /**
   * Get restrictionType
   * @return restrictionType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESTRICTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public StackingRestrictionType getRestrictionType() {
    return restrictionType;
  }


  @JsonProperty(JSON_PROPERTY_RESTRICTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestrictionType(StackingRestrictionType restrictionType) {
    this.restrictionType = restrictionType;
  }


  public StackingRestrictions itemIds(List<String> itemIds) {
    this.itemIds = itemIds;
    return this;
  }

  public StackingRestrictions addItemIdsItem(String itemIdsItem) {
    if (this.itemIds == null) {
      this.itemIds = new ArrayList<>();
    }
    this.itemIds.add(itemIdsItem);
    return this;
  }

  /**
   * Specifies the list of Item.id to which the restrictionType applies.
   * @return itemIds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ITEM_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getItemIds() {
    return itemIds;
  }


  @JsonProperty(JSON_PROPERTY_ITEM_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItemIds(List<String> itemIds) {
    this.itemIds = itemIds;
  }


  /**
   * Return true if this StackingRestrictions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackingRestrictions stackingRestrictions = (StackingRestrictions) o;
    return Objects.equals(this.itemId, stackingRestrictions.itemId) &&
        Objects.equals(this.restrictionType, stackingRestrictions.restrictionType) &&
        Objects.equals(this.itemIds, stackingRestrictions.itemIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemId, restrictionType, itemIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackingRestrictions {\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    restrictionType: ").append(toIndentedString(restrictionType)).append("\n");
    sb.append("    itemIds: ").append(toIndentedString(itemIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `itemId` to the URL query string
    if (getItemId() != null) {
      joiner.add(String.format("%sitemId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getItemId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `restrictionType` to the URL query string
    if (getRestrictionType() != null) {
      joiner.add(String.format("%srestrictionType%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRestrictionType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `itemIds` to the URL query string
    if (getItemIds() != null) {
      for (int i = 0; i < getItemIds().size(); i++) {
        joiner.add(String.format("%sitemIds%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getItemIds().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

