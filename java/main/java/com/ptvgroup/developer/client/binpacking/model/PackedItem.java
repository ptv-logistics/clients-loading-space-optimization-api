/*
 * Loading Optimization
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.binpacking.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.binpacking.model.BoxDimensions;
import com.ptvgroup.developer.client.binpacking.model.ItemOrientation;
import com.ptvgroup.developer.client.binpacking.model.ItemPosition;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.binpacking.ApiClient;
/**
 * Describes how an item is packed into the bin. If Item.numberOfInstances is greater than one, several of this item are packed into the bin. 
 */
@JsonPropertyOrder({
  PackedItem.JSON_PROPERTY_ITEM_ID,
  PackedItem.JSON_PROPERTY_POSITION,
  PackedItem.JSON_PROPERTY_DIMENSIONS,
  PackedItem.JSON_PROPERTY_ORIENTATION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T13:28:30.257776203Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class PackedItem {
  public static final String JSON_PROPERTY_ITEM_ID = "itemId";
  private String itemId;

  public static final String JSON_PROPERTY_POSITION = "position";
  private ItemPosition position;

  public static final String JSON_PROPERTY_DIMENSIONS = "dimensions";
  private BoxDimensions dimensions;

  public static final String JSON_PROPERTY_ORIENTATION = "orientation";
  private ItemOrientation orientation;

  public PackedItem() { 
  }

  public PackedItem itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * ID of the item.
   * @return itemId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ITEM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getItemId() {
    return itemId;
  }


  @JsonProperty(JSON_PROPERTY_ITEM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public PackedItem position(ItemPosition position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ItemPosition getPosition() {
    return position;
  }


  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPosition(ItemPosition position) {
    this.position = position;
  }


  public PackedItem dimensions(BoxDimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public BoxDimensions getDimensions() {
    return dimensions;
  }


  @JsonProperty(JSON_PROPERTY_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDimensions(BoxDimensions dimensions) {
    this.dimensions = dimensions;
  }


  public PackedItem orientation(ItemOrientation orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * Get orientation
   * @return orientation
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORIENTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ItemOrientation getOrientation() {
    return orientation;
  }


  @JsonProperty(JSON_PROPERTY_ORIENTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrientation(ItemOrientation orientation) {
    this.orientation = orientation;
  }


  /**
   * Return true if this PackedItem object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackedItem packedItem = (PackedItem) o;
    return Objects.equals(this.itemId, packedItem.itemId) &&
        Objects.equals(this.position, packedItem.position) &&
        Objects.equals(this.dimensions, packedItem.dimensions) &&
        Objects.equals(this.orientation, packedItem.orientation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemId, position, dimensions, orientation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackedItem {\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `itemId` to the URL query string
    if (getItemId() != null) {
      joiner.add(String.format("%sitemId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getItemId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `position` to the URL query string
    if (getPosition() != null) {
      joiner.add(getPosition().toUrlQueryString(prefix + "position" + suffix));
    }

    // add `dimensions` to the URL query string
    if (getDimensions() != null) {
      joiner.add(getDimensions().toUrlQueryString(prefix + "dimensions" + suffix));
    }

    // add `orientation` to the URL query string
    if (getOrientation() != null) {
      joiner.add(String.format("%sorientation%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOrientation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

