/*
 * Loading Optimization
 *
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.binpacking.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.binpacking.Model
{
    /// <summary>
    /// Size of an item or bin.
    /// </summary>
    [DataContract(Name = "BoxDimensions")]
    public partial class BoxDimensions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxDimensions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BoxDimensions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxDimensions" /> class.
        /// </summary>
        /// <param name="x">Extent along x-axis (width) in [cm]. (required).</param>
        /// <param name="y">Extent along y-axis (height) in [cm]. (required).</param>
        /// <param name="z">Extent along z-axis (length) in [cm]. (required).</param>
        public BoxDimensions(int? x = default(int?), int? y = default(int?), int? z = default(int?))
        {
            // to ensure "x" is required (not null)
            if (x == null)
            {
                throw new ArgumentNullException("x is a required property for BoxDimensions and cannot be null");
            }
            this.X = x;
            // to ensure "y" is required (not null)
            if (y == null)
            {
                throw new ArgumentNullException("y is a required property for BoxDimensions and cannot be null");
            }
            this.Y = y;
            // to ensure "z" is required (not null)
            if (z == null)
            {
                throw new ArgumentNullException("z is a required property for BoxDimensions and cannot be null");
            }
            this.Z = z;
        }

        /// <summary>
        /// Extent along x-axis (width) in [cm].
        /// </summary>
        /// <value>Extent along x-axis (width) in [cm].</value>
        [DataMember(Name = "x", IsRequired = true, EmitDefaultValue = true)]
        public int? X { get; set; }

        /// <summary>
        /// Extent along y-axis (height) in [cm].
        /// </summary>
        /// <value>Extent along y-axis (height) in [cm].</value>
        [DataMember(Name = "y", IsRequired = true, EmitDefaultValue = true)]
        public int? Y { get; set; }

        /// <summary>
        /// Extent along z-axis (length) in [cm].
        /// </summary>
        /// <value>Extent along z-axis (length) in [cm].</value>
        [DataMember(Name = "z", IsRequired = true, EmitDefaultValue = true)]
        public int? Z { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BoxDimensions {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Z: ").Append(Z).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // X (int?) minimum
            if (this.X < (int?)1)
            {
                yield return new ValidationResult("Invalid value for X, must be a value greater than or equal to 1.", new [] { "X" });
            }

            // Y (int?) minimum
            if (this.Y < (int?)1)
            {
                yield return new ValidationResult("Invalid value for Y, must be a value greater than or equal to 1.", new [] { "Y" });
            }

            // Z (int?) minimum
            if (this.Z < (int?)1)
            {
                yield return new ValidationResult("Invalid value for Z, must be a value greater than or equal to 1.", new [] { "Z" });
            }

            yield break;
        }
    }

}
