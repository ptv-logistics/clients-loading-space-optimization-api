/*
 * Loading Optimization
 *
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.binpacking.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.binpacking.Model
{
    /// <summary>
    /// Bin
    /// </summary>
    [DataContract(Name = "Bin")]
    public partial class Bin : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bin" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Bin() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Bin" /> class.
        /// </summary>
        /// <param name="id">User provided ID for this bin. Must be unique. (required).</param>
        /// <param name="numberOfInstances">Number of instances of this bin available for packing. (default to 1).</param>
        /// <param name="dimensions">dimensions (required).</param>
        /// <param name="maximumVolumeCapacity">Maximum accumulated volume of items that can be packed into a single bin irrespective of bin dimensions in [cm³]. This value must never exceed the natural inner volume specified by dimensions. If not given, defaults to the natural inner volume specified by dimensions..</param>
        /// <param name="maximumWeightCapacity">Maximum accumulated weight of items that can be packed into a single bin in [g]. If not given the weight capacity is assumed to be the maximum value..</param>
        public Bin(string id = default(string), int? numberOfInstances = 1, BoxDimensions dimensions = default(BoxDimensions), int? maximumVolumeCapacity = default(int?), int? maximumWeightCapacity = default(int?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Bin and cannot be null");
            }
            this.Id = id;
            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
            {
                throw new ArgumentNullException("dimensions is a required property for Bin and cannot be null");
            }
            this.Dimensions = dimensions;
            // use default value if no "numberOfInstances" provided
            this.NumberOfInstances = numberOfInstances ?? 1;
            this.MaximumVolumeCapacity = maximumVolumeCapacity;
            this.MaximumWeightCapacity = maximumWeightCapacity;
        }

        /// <summary>
        /// User provided ID for this bin. Must be unique.
        /// </summary>
        /// <value>User provided ID for this bin. Must be unique.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Number of instances of this bin available for packing.
        /// </summary>
        /// <value>Number of instances of this bin available for packing.</value>
        [DataMember(Name = "numberOfInstances", EmitDefaultValue = true)]
        public int? NumberOfInstances { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", IsRequired = true, EmitDefaultValue = true)]
        public BoxDimensions Dimensions { get; set; }

        /// <summary>
        /// Maximum accumulated volume of items that can be packed into a single bin irrespective of bin dimensions in [cm³]. This value must never exceed the natural inner volume specified by dimensions. If not given, defaults to the natural inner volume specified by dimensions.
        /// </summary>
        /// <value>Maximum accumulated volume of items that can be packed into a single bin irrespective of bin dimensions in [cm³]. This value must never exceed the natural inner volume specified by dimensions. If not given, defaults to the natural inner volume specified by dimensions.</value>
        [DataMember(Name = "maximumVolumeCapacity", EmitDefaultValue = true)]
        public int? MaximumVolumeCapacity { get; set; }

        /// <summary>
        /// Maximum accumulated weight of items that can be packed into a single bin in [g]. If not given the weight capacity is assumed to be the maximum value.
        /// </summary>
        /// <value>Maximum accumulated weight of items that can be packed into a single bin in [g]. If not given the weight capacity is assumed to be the maximum value.</value>
        [DataMember(Name = "maximumWeightCapacity", EmitDefaultValue = true)]
        public int? MaximumWeightCapacity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Bin {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NumberOfInstances: ").Append(NumberOfInstances).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  MaximumVolumeCapacity: ").Append(MaximumVolumeCapacity).Append("\n");
            sb.Append("  MaximumWeightCapacity: ").Append(MaximumWeightCapacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfInstances (int?) maximum
            if (this.NumberOfInstances > (int?)1000)
            {
                yield return new ValidationResult("Invalid value for NumberOfInstances, must be a value less than or equal to 1000.", new [] { "NumberOfInstances" });
            }

            // NumberOfInstances (int?) minimum
            if (this.NumberOfInstances < (int?)1)
            {
                yield return new ValidationResult("Invalid value for NumberOfInstances, must be a value greater than or equal to 1.", new [] { "NumberOfInstances" });
            }

            // MaximumVolumeCapacity (int?) minimum
            if (this.MaximumVolumeCapacity < (int?)0)
            {
                yield return new ValidationResult("Invalid value for MaximumVolumeCapacity, must be a value greater than or equal to 0.", new [] { "MaximumVolumeCapacity" });
            }

            // MaximumWeightCapacity (int?) maximum
            if (this.MaximumWeightCapacity > (int?)80000000)
            {
                yield return new ValidationResult("Invalid value for MaximumWeightCapacity, must be a value less than or equal to 80000000.", new [] { "MaximumWeightCapacity" });
            }

            // MaximumWeightCapacity (int?) minimum
            if (this.MaximumWeightCapacity < (int?)0)
            {
                yield return new ValidationResult("Invalid value for MaximumWeightCapacity, must be a value greater than or equal to 0.", new [] { "MaximumWeightCapacity" });
            }

            yield break;
        }
    }

}
