/*
 * Loading Optimization
 *
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.binpacking.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.binpacking.Model
{
    /// <summary>
    /// Defines the list of items to be unloaded at this point.
    /// </summary>
    [DataContract(Name = "Stop")]
    public partial class Stop : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Stop" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Stop() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Stop" /> class.
        /// </summary>
        /// <param name="itemsToUnload">Defines the list of items to unload. (required).</param>
        public Stop(List<ItemsToUnload> itemsToUnload = default(List<ItemsToUnload>))
        {
            // to ensure "itemsToUnload" is required (not null)
            if (itemsToUnload == null)
            {
                throw new ArgumentNullException("itemsToUnload is a required property for Stop and cannot be null");
            }
            this.ItemsToUnload = itemsToUnload;
        }

        /// <summary>
        /// Defines the list of items to unload.
        /// </summary>
        /// <value>Defines the list of items to unload.</value>
        [DataMember(Name = "itemsToUnload", IsRequired = true, EmitDefaultValue = true)]
        public List<ItemsToUnload> ItemsToUnload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Stop {\n");
            sb.Append("  ItemsToUnload: ").Append(ItemsToUnload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
