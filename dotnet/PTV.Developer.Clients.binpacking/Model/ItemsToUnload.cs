/*
 * Loading Optimization
 *
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.binpacking.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.binpacking.Model
{
    /// <summary>
    /// Defines the number of instances of an item to unload.
    /// </summary>
    [DataContract(Name = "ItemsToUnload")]
    public partial class ItemsToUnload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsToUnload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemsToUnload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsToUnload" /> class.
        /// </summary>
        /// <param name="itemId">ID of the item. (required).</param>
        /// <param name="numberOfInstances">The amount of instances of the item to unload. (default to 1).</param>
        public ItemsToUnload(string itemId = default(string), int? numberOfInstances = 1)
        {
            // to ensure "itemId" is required (not null)
            if (itemId == null)
            {
                throw new ArgumentNullException("itemId is a required property for ItemsToUnload and cannot be null");
            }
            this.ItemId = itemId;
            // use default value if no "numberOfInstances" provided
            this.NumberOfInstances = numberOfInstances ?? 1;
        }

        /// <summary>
        /// ID of the item.
        /// </summary>
        /// <value>ID of the item.</value>
        [DataMember(Name = "itemId", IsRequired = true, EmitDefaultValue = true)]
        public string ItemId { get; set; }

        /// <summary>
        /// The amount of instances of the item to unload.
        /// </summary>
        /// <value>The amount of instances of the item to unload.</value>
        [DataMember(Name = "numberOfInstances", EmitDefaultValue = true)]
        public int? NumberOfInstances { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemsToUnload {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  NumberOfInstances: ").Append(NumberOfInstances).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfInstances (int?) minimum
            if (this.NumberOfInstances < (int?)1)
            {
                yield return new ValidationResult("Invalid value for NumberOfInstances, must be a value greater than or equal to 1.", new [] { "NumberOfInstances" });
            }

            yield break;
        }
    }

}
