/*
 * Loading Optimization
 *
 * With the Bin Packing service you can pack a number of items of various types into a number of bins of various types.
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.binpacking.Client;
using PTV.Developer.Clients.binpacking.Model;

namespace PTV.Developer.Clients.binpacking.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBinsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a bin packing operation and deletes the results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CancelBinPacking(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a bin packing operation and deletes the results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelBinPackingWithHttpInfo(Guid? id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the results of a bin packing operation specified by its ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackBinsResponse</returns>
        PackBinsResponse GetPackedBins(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the results of a bin packing operation specified by its ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackBinsResponse</returns>
        ApiResponse<PackBinsResponse> GetPackedBinsWithHttpInfo(Guid? id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of a bin packing operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="maximumPollingPeriod">If the calculation is still running, this operation will be blocked and will not return before this period [ms] expires. If the calculation is completed, it will return immediately.  The default of 0 ms will cause the operation to return immediately in any case. Use a value &gt; 0 to implement long polling to reduce the number of requests. See the [tutorial](https://developer.myptv.com/en/resources/tutorials/general/how-use-asynchronous-requests-ptv-developer-apis) on asynchronous requests for details.  (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse GetStatus(Guid? id, int? maximumPollingPeriod = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of a bin packing operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="maximumPollingPeriod">If the calculation is still running, this operation will be blocked and will not return before this period [ms] expires. If the calculation is completed, it will return immediately.  The default of 0 ms will cause the operation to return immediately in any case. Use a value &gt; 0 to implement long polling to reduce the number of requests. See the [tutorial](https://developer.myptv.com/en/resources/tutorials/general/how-use-asynchronous-requests-ptv-developer-apis) on asynchronous requests for details.  (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> GetStatusWithHttpInfo(Guid? id, int? maximumPollingPeriod = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of up to 100 items of various types that get packed into up to 2 bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackBinsResponse</returns>
        PackBinsResponse PackBins(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of up to 100 items of various types that get packed into up to 2 bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackBinsResponse</returns>
        ApiResponse<PackBinsResponse> PackBinsWithHttpInfo(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of items of various types that get packed into a number of bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackedBinsIdentifier</returns>
        PackedBinsIdentifier StartBinPacking(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of items of various types that get packed into a number of bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackedBinsIdentifier</returns>
        ApiResponse<PackedBinsIdentifier> StartBinPackingWithHttpInfo(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBinsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a bin packing operation and deletes the results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelBinPackingAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a bin packing operation and deletes the results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelBinPackingWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the results of a bin packing operation specified by its ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackBinsResponse</returns>
        System.Threading.Tasks.Task<PackBinsResponse> GetPackedBinsAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the results of a bin packing operation specified by its ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackBinsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackBinsResponse>> GetPackedBinsWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of a bin packing operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="maximumPollingPeriod">If the calculation is still running, this operation will be blocked and will not return before this period [ms] expires. If the calculation is completed, it will return immediately.  The default of 0 ms will cause the operation to return immediately in any case. Use a value &gt; 0 to implement long polling to reduce the number of requests. See the [tutorial](https://developer.myptv.com/en/resources/tutorials/general/how-use-asynchronous-requests-ptv-developer-apis) on asynchronous requests for details.  (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> GetStatusAsync(Guid? id, int? maximumPollingPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of a bin packing operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="maximumPollingPeriod">If the calculation is still running, this operation will be blocked and will not return before this period [ms] expires. If the calculation is completed, it will return immediately.  The default of 0 ms will cause the operation to return immediately in any case. Use a value &gt; 0 to implement long polling to reduce the number of requests. See the [tutorial](https://developer.myptv.com/en/resources/tutorials/general/how-use-asynchronous-requests-ptv-developer-apis) on asynchronous requests for details.  (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> GetStatusWithHttpInfoAsync(Guid? id, int? maximumPollingPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of up to 100 items of various types that get packed into up to 2 bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackBinsResponse</returns>
        System.Threading.Tasks.Task<PackBinsResponse> PackBinsAsync(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of up to 100 items of various types that get packed into up to 2 bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackBinsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackBinsResponse>> PackBinsWithHttpInfoAsync(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of items of various types that get packed into a number of bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackedBinsIdentifier</returns>
        System.Threading.Tasks.Task<PackedBinsIdentifier> StartBinPackingAsync(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of items of various types that get packed into a number of bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackedBinsIdentifier)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackedBinsIdentifier>> StartBinPackingWithHttpInfoAsync(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBinsApi : IBinsApiSync, IBinsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BinsApi : IBinsApi
    {
        private PTV.Developer.Clients.binpacking.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BinsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BinsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BinsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BinsApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.binpacking.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.binpacking.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.binpacking.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.binpacking.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.binpacking.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.binpacking.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BinsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BinsApi(PTV.Developer.Clients.binpacking.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.binpacking.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.binpacking.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.binpacking.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.binpacking.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.binpacking.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BinsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BinsApi(PTV.Developer.Clients.binpacking.Client.ISynchronousClient client, PTV.Developer.Clients.binpacking.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.binpacking.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.binpacking.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.binpacking.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.binpacking.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.binpacking.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.binpacking.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Cancels a bin packing operation and deletes the results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CancelBinPacking(Guid? id, int operationIndex = 0)
        {
            CancelBinPackingWithHttpInfo(id);
        }

        /// <summary>
        ///  Cancels a bin packing operation and deletes the results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PTV.Developer.Clients.binpacking.Client.ApiResponse<Object> CancelBinPackingWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.binpacking.Client.ApiException(400, "Missing required parameter 'id' when calling BinsApi->CancelBinPacking");
            }

            PTV.Developer.Clients.binpacking.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.binpacking.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "BinsApi.CancelBinPacking";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/bins/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelBinPacking", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancels a bin packing operation and deletes the results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelBinPackingAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await CancelBinPackingWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Cancels a bin packing operation and deletes the results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.binpacking.Client.ApiResponse<Object>> CancelBinPackingWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.binpacking.Client.ApiException(400, "Missing required parameter 'id' when calling BinsApi->CancelBinPacking");
            }


            PTV.Developer.Clients.binpacking.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.binpacking.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "BinsApi.CancelBinPacking";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/bins/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelBinPacking", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the results of a bin packing operation specified by its ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackBinsResponse</returns>
        public PackBinsResponse GetPackedBins(Guid? id, int operationIndex = 0)
        {
            PTV.Developer.Clients.binpacking.Client.ApiResponse<PackBinsResponse> localVarResponse = GetPackedBinsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the results of a bin packing operation specified by its ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackBinsResponse</returns>
        public PTV.Developer.Clients.binpacking.Client.ApiResponse<PackBinsResponse> GetPackedBinsWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.binpacking.Client.ApiException(400, "Missing required parameter 'id' when calling BinsApi->GetPackedBins");
            }

            PTV.Developer.Clients.binpacking.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.binpacking.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "BinsApi.GetPackedBins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PackBinsResponse>("/bins/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPackedBins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the results of a bin packing operation specified by its ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackBinsResponse</returns>
        public async System.Threading.Tasks.Task<PackBinsResponse> GetPackedBinsAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.binpacking.Client.ApiResponse<PackBinsResponse> localVarResponse = await GetPackedBinsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the results of a bin packing operation specified by its ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackBinsResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.binpacking.Client.ApiResponse<PackBinsResponse>> GetPackedBinsWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.binpacking.Client.ApiException(400, "Missing required parameter 'id' when calling BinsApi->GetPackedBins");
            }


            PTV.Developer.Clients.binpacking.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.binpacking.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "BinsApi.GetPackedBins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PackBinsResponse>("/bins/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPackedBins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the status of a bin packing operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="maximumPollingPeriod">If the calculation is still running, this operation will be blocked and will not return before this period [ms] expires. If the calculation is completed, it will return immediately.  The default of 0 ms will cause the operation to return immediately in any case. Use a value &gt; 0 to implement long polling to reduce the number of requests. See the [tutorial](https://developer.myptv.com/en/resources/tutorials/general/how-use-asynchronous-requests-ptv-developer-apis) on asynchronous requests for details.  (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse GetStatus(Guid? id, int? maximumPollingPeriod = default(int?), int operationIndex = 0)
        {
            PTV.Developer.Clients.binpacking.Client.ApiResponse<StatusResponse> localVarResponse = GetStatusWithHttpInfo(id, maximumPollingPeriod);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the status of a bin packing operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="maximumPollingPeriod">If the calculation is still running, this operation will be blocked and will not return before this period [ms] expires. If the calculation is completed, it will return immediately.  The default of 0 ms will cause the operation to return immediately in any case. Use a value &gt; 0 to implement long polling to reduce the number of requests. See the [tutorial](https://developer.myptv.com/en/resources/tutorials/general/how-use-asynchronous-requests-ptv-developer-apis) on asynchronous requests for details.  (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public PTV.Developer.Clients.binpacking.Client.ApiResponse<StatusResponse> GetStatusWithHttpInfo(Guid? id, int? maximumPollingPeriod = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.binpacking.Client.ApiException(400, "Missing required parameter 'id' when calling BinsApi->GetStatus");
            }

            PTV.Developer.Clients.binpacking.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.binpacking.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (maximumPollingPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToMultiMap("", "maximumPollingPeriod", maximumPollingPeriod));
            }

            localVarRequestOptions.Operation = "BinsApi.GetStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StatusResponse>("/bins/status/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the status of a bin packing operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="maximumPollingPeriod">If the calculation is still running, this operation will be blocked and will not return before this period [ms] expires. If the calculation is completed, it will return immediately.  The default of 0 ms will cause the operation to return immediately in any case. Use a value &gt; 0 to implement long polling to reduce the number of requests. See the [tutorial](https://developer.myptv.com/en/resources/tutorials/general/how-use-asynchronous-requests-ptv-developer-apis) on asynchronous requests for details.  (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> GetStatusAsync(Guid? id, int? maximumPollingPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.binpacking.Client.ApiResponse<StatusResponse> localVarResponse = await GetStatusWithHttpInfoAsync(id, maximumPollingPeriod, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the status of a bin packing operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a bin packing operation.</param>
        /// <param name="maximumPollingPeriod">If the calculation is still running, this operation will be blocked and will not return before this period [ms] expires. If the calculation is completed, it will return immediately.  The default of 0 ms will cause the operation to return immediately in any case. Use a value &gt; 0 to implement long polling to reduce the number of requests. See the [tutorial](https://developer.myptv.com/en/resources/tutorials/general/how-use-asynchronous-requests-ptv-developer-apis) on asynchronous requests for details.  (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.binpacking.Client.ApiResponse<StatusResponse>> GetStatusWithHttpInfoAsync(Guid? id, int? maximumPollingPeriod = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.binpacking.Client.ApiException(400, "Missing required parameter 'id' when calling BinsApi->GetStatus");
            }


            PTV.Developer.Clients.binpacking.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.binpacking.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (maximumPollingPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToMultiMap("", "maximumPollingPeriod", maximumPollingPeriod));
            }

            localVarRequestOptions.Operation = "BinsApi.GetStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StatusResponse>("/bins/status/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of up to 100 items of various types that get packed into up to 2 bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackBinsResponse</returns>
        public PackBinsResponse PackBins(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0)
        {
            PTV.Developer.Clients.binpacking.Client.ApiResponse<PackBinsResponse> localVarResponse = PackBinsWithHttpInfo(packBinsRequest, focus);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of up to 100 items of various types that get packed into up to 2 bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackBinsResponse</returns>
        public PTV.Developer.Clients.binpacking.Client.ApiResponse<PackBinsResponse> PackBinsWithHttpInfo(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0)
        {
            // verify the required parameter 'packBinsRequest' is set
            if (packBinsRequest == null)
            {
                throw new PTV.Developer.Clients.binpacking.Client.ApiException(400, "Missing required parameter 'packBinsRequest' when calling BinsApi->PackBins");
            }

            PTV.Developer.Clients.binpacking.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.binpacking.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (focus != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToMultiMap("", "focus", focus));
            }
            localVarRequestOptions.Data = packBinsRequest;

            localVarRequestOptions.Operation = "BinsApi.PackBins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PackBinsResponse>("/bins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PackBins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of up to 100 items of various types that get packed into up to 2 bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackBinsResponse</returns>
        public async System.Threading.Tasks.Task<PackBinsResponse> PackBinsAsync(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.binpacking.Client.ApiResponse<PackBinsResponse> localVarResponse = await PackBinsWithHttpInfoAsync(packBinsRequest, focus, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Performs a bin packing operation as described by the request and directly returns the packing result in the response. Therefore the request is restricted as described at the request body to limit the calculation time to a maximum of 10 seconds. In case the operation lasts longer, it will be aborted. The state up to then will be returned. So the result may differ to the asynchronous call.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of up to 100 items of various types that get packed into up to 2 bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackBinsResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.binpacking.Client.ApiResponse<PackBinsResponse>> PackBinsWithHttpInfoAsync(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'packBinsRequest' is set
            if (packBinsRequest == null)
            {
                throw new PTV.Developer.Clients.binpacking.Client.ApiException(400, "Missing required parameter 'packBinsRequest' when calling BinsApi->PackBins");
            }


            PTV.Developer.Clients.binpacking.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.binpacking.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (focus != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToMultiMap("", "focus", focus));
            }
            localVarRequestOptions.Data = packBinsRequest;

            localVarRequestOptions.Operation = "BinsApi.PackBins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PackBinsResponse>("/bins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PackBins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of items of various types that get packed into a number of bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackedBinsIdentifier</returns>
        public PackedBinsIdentifier StartBinPacking(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0)
        {
            PTV.Developer.Clients.binpacking.Client.ApiResponse<PackedBinsIdentifier> localVarResponse = StartBinPackingWithHttpInfo(packBinsRequest, focus);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of items of various types that get packed into a number of bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackedBinsIdentifier</returns>
        public PTV.Developer.Clients.binpacking.Client.ApiResponse<PackedBinsIdentifier> StartBinPackingWithHttpInfo(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0)
        {
            // verify the required parameter 'packBinsRequest' is set
            if (packBinsRequest == null)
            {
                throw new PTV.Developer.Clients.binpacking.Client.ApiException(400, "Missing required parameter 'packBinsRequest' when calling BinsApi->StartBinPacking");
            }

            PTV.Developer.Clients.binpacking.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.binpacking.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (focus != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToMultiMap("", "focus", focus));
            }
            localVarRequestOptions.Data = packBinsRequest;

            localVarRequestOptions.Operation = "BinsApi.StartBinPacking";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PackedBinsIdentifier>("/bins/async", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartBinPacking", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of items of various types that get packed into a number of bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackedBinsIdentifier</returns>
        public async System.Threading.Tasks.Task<PackedBinsIdentifier> StartBinPackingAsync(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.binpacking.Client.ApiResponse<PackedBinsIdentifier> localVarResponse = await StartBinPackingWithHttpInfoAsync(packBinsRequest, focus, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Starts a bin packing operation as described by the request. The result informs if operation is accepted and in this case returns an operation ID. Further information and result should be requested by getStatus() and getPackedBins() via ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.binpacking.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packBinsRequest">Specifies a packing problem consisting of a number of items of various types that get packed into a number of bins of various types. Items as well as bins are always of cuboid shape. </param>
        /// <param name="focus"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackedBinsIdentifier)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.binpacking.Client.ApiResponse<PackedBinsIdentifier>> StartBinPackingWithHttpInfoAsync(PackBinsRequest packBinsRequest, BinPackingFocus? focus = default(BinPackingFocus?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'packBinsRequest' is set
            if (packBinsRequest == null)
            {
                throw new PTV.Developer.Clients.binpacking.Client.ApiException(400, "Missing required parameter 'packBinsRequest' when calling BinsApi->StartBinPacking");
            }


            PTV.Developer.Clients.binpacking.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.binpacking.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.binpacking.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (focus != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.binpacking.Client.ClientUtils.ParameterToMultiMap("", "focus", focus));
            }
            localVarRequestOptions.Data = packBinsRequest;

            localVarRequestOptions.Operation = "BinsApi.StartBinPacking";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PackedBinsIdentifier>("/bins/async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartBinPacking", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
